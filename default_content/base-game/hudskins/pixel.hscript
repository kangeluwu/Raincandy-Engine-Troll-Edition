////
var roundTo = CoolUtil.snap;
var timerNumsGraphic = Paths.image("pixelUI/timer-nums");
var comboNumsGraphic = Paths.image("pixelUI/comboNums-pixel");

var hud;
var hb;
var bg;

var timerCirc;
var timerNums = [];
var timerSpecial;
var curClockTxt = null;

var isSetup = false;

///// hud skin script functions /////

introSnds = ["intro3-pixel","intro2-pixel","intro1-pixel","introGo-pixel"];
introAlts = ["pixelUI/onyourmarks-pixel", 'pixelUI/ready-pixel', 'pixelUI/set-pixel', 'pixelUI/date-pixel'];
rosesHealthBar = true;

function onSkinLoad()
{
	if (isSetup || game.hud == null) return;
	isSetup = true;
	
	////
	var spr = new RatingSprite();

	spr.loadGraphic(comboNumsGraphic);
	spr.loadGraphic(comboNumsGraphic, true, Math.floor(spr.width / 12), spr.height);
	spr.antialiasing = false;
	
	for (n in 0...10) spr.animation.add(Std.string(n), [n], 0, false);
	spr.animation.add("-", [10], 0, false);
	spr.animation.add(".", [11], 0, false);
	
	spr.scale.set(6, 6);
	spr.updateHitbox();
	
	game.ratingGroup.comboTemplate = spr;	
	
	////
	var spr = new RatingSprite();
	spr.antialiasing = false;
	spr.scale.set(6, 6);
	
	game.ratingGroup.judgeTemplate = spr;
	
	////
	hud = game.hud;
	
	hb = hud.healthBar;
	bg = hud.healthBarBG;
	
	////
	hud.timeTxt.visible = false;
	hud.timeBar.visible = false;
	hud.timeBarBG.visible = false;
	hud.updateTime = false;
	
	var graphic = Paths.image("pixelUI/timer-circ");
	timerCirc = new FlxSprite((FlxG.width - graphic.width * 6) / 2, 0, graphic);
	timerCirc.antialiasing = false;
	timerCirc.scale.set(6, 6);
	timerCirc.updateHitbox();
	timerCirc.offset.y += timerCirc.height / 2;
	timerCirc.alpha = 0.0;
	hud.insert(hud.members.indexOf(hud.timeBarBG), timerCirc);
	
	timerSpecial = new FlxSprite();
	timerSpecial.scale.set(6, 6);
	timerSpecial.antialiasing = false;
	timerSpecial.exists = false;
	timerSpecial.alpha = 0.0;
	hud.insert(hud.members.indexOf(timerCirc) + 1, timerSpecial);
	
	adjustClock();
	////
	
	if (rosesHealthBar==true && hb != null && bg != null)
	{
		hud.remove(bg);
		hud.insert(hud.members.indexOf(hb) + 1, bg);
		hud.remove(hud.scoreTxt);
		hud.insert(hud.members.indexOf(hb) + 2, hud.scoreTxt);

		bg.color = 0xFFFFFFFF;
		bg.loadGraphic(Paths.image("pixelUI/healthBar"));
		bg.scale.set(6, 6);
		bg.updateHitbox();
		
		adjustHealthBar();
	
	}else{
		rosesHealthBar = false;
	}

}

function onCreatePost() {
	if (!isSetup && game.hudSkinScript == script)
		onSkinLoad();
}

function onSkinUnload() {
	if (!isSetup) return;
	isSetup = false;
	for (field in game.playfields.members){
		for (note in field.grpNoteSplashes.members){

			if (note.colorSwap != null){
			note.colorSwap.usePixel = false;
			note.colorSwap.size = [FlxG.width/32,FlxG.height/32];
			}
		}
		for (note in field.grpNoteHoldSplashes.members){
			if (note.colorSwap != null){
			note.colorSwap.usePixel = false;
			note.colorSwap.size = [FlxG.width/32,FlxG.height/32];
			}
		}
	}
	// uhh
}

function onUpdatePost(e){
	if (isSetup){
		for (field in game.playfields.members){
			for (note in field.grpNoteSplashes.members){

				if (note.colorSwap != null){
					note.colorSwap.usePixel = true;
				note.colorSwap.size = [6,6];
				}
			}
			for (note in field.grpNoteHoldSplashes.members){
				if (note.colorSwap != null){
				note.colorSwap.usePixel = true;
				note.colorSwap.size = [6,6];
				}
			}
}
}
}
function onDisplayJudgmentPost(spr, name){
	spr.loadGraphic(Paths.image("pixelUI/"+name+"-pixel"));
	spr.scale.set(6, 6);
	spr.updateHitbox();
	spr.antialiasing = false;
	spr.cancelTween();
	if (ClientPrefs.simpleJudge) {
		spr.scale.set(6 * 1.1, 6 * 1.1);
		spr.tween = FlxTween.tween(spr.scale, {x: 6, y: 6}, 0.1, {
			ease: FlxEase.quadOut,
			onComplete: function(tween:FlxTween) {
				if (!spr.alive)
					return;

				var stepDur = (Conductor.stepCrochet * 0.001);
				spr.tween = FlxTween.tween(spr.scale, {x: 0, y: 0}, stepDur, {
					startDelay: stepDur * 8,
					ease: FlxEase.quadIn,
					onComplete: (tween:FlxTween) -> spr.kill()
				});
			}
		});
	} else {
		spr.scale.set(5.5, 5.5);
		spr.tween = FlxTween.tween(spr.scale, {x: 6, y: 6}, 0.1, {ease: FlxEase.backOut, onComplete: function(twn){
			spr.tween = FlxTween.tween(spr, {alpha: 0.0}, 0.2, {
					startDelay: Conductor.crochet * 0.001,
					onComplete: (_) -> spr.kill()
				});
		}});
	}
}
function onDisplayComboPost(combo){
	for (numSpr in game.lastCombos)
		{
			numSpr.cancelTween();
			if (ClientPrefs.simpleJudge)
				{

					numSpr.scale.set(6, 6);
					numSpr.scale.x *= 1.25;
					numSpr.updateHitbox();
					numSpr.scale.y *= 0.75;
	
					numSpr.tween = FlxTween.tween(numSpr.scale, {x:6, y: 6}, 0.2, {ease: FlxEase.circOut});
				}else
				{
					
					numSpr.scale.set(6, 6);
					numSpr.updateHitbox();
					numSpr.tween = FlxTween.tween(numSpr, {alpha: 0.0}, 0.2, {
						startDelay: Conductor.crochet * 0.002,
						onComplete: (_) -> numSpr.kill()
					});
				}
		}
}
function onCountdownTick(tick)
{
	switch(tick) {
		case 3:
			FlxTween.tween(timerCirc, {alpha: 1}, Conductor.crochet / 1000);
			
		case 4:
			updateTimerTxt();

			timerSpecial.alpha = 0.0;
			FlxTween.tween(timerSpecial, {alpha: 1}, Conductor.crochet / 1000);
			
			for (spr in timerNums){
				spr.alpha = 0.0;
				FlxTween.tween(spr, {alpha: 1}, Conductor.crochet / 1000);
			}
	}
}

function onSongStart()
{
	timerCirc.alpha = 1.0;
	timerSpecial.alpha = 1.0;
}

function onUpdate(elapsed){	
	if (!game.startingSong && !game.endingSong)
		updateTimerTxt();
}

function makeCountdownSprite(sprImage, swagCounter, tmr){
	var countdownSpr = new FlxSprite(0, 0, sprImage);
	countdownSpr.scrollFactor.set();
	countdownSpr.scale.set(6, 6);
	countdownSpr.updateHitbox();
	countdownSpr.cameras = [state.camHUD];
	countdownSpr.screenCenter();
	countdownSpr.antialiasing = false;
	return countdownSpr;
}

function setupNoteTexture(note:Note){
	if(note.isSustainNote)
		note.reloadNote(note.texPrefix, 'NOTE_assets', note.texSuffix + 'ENDS', 'pixelUI', 4, 2);
	else
		note.reloadNote(note.texPrefix, 'NOTE_assets', note.texSuffix, 'pixelUI', 4, 5);

		note.scale.set(6 * Note.spriteScale / 0.7, 6 * Note.spriteScale / 0.7);    
	note.antialiasing = false;
}

function setupReceptorTexture(strum:StrumNote){
	strum.isQuant = false;
	
	var lastAnim:String = null;
	if (strum.animation.curAnim != null) 
		lastAnim = strum.animation.curAnim.name;
	
	var br:String = 'NOTE_assets';
	
	var arrowSkin = PlayState.SONG.arrowSkin;
	if (Paths.imageExists("pixelUI/" + arrowSkin))
		br = arrowSkin;
	
	if (ClientPrefs.noteSkin == 'Quants') {
		if (Paths.imageExists("pixelUI/QUANT"+br)) {
			br = "QUANT" + br;
			strum.isQuant = true;
		}
	}
	
	// TODO: add an easy way to do indices for strums

	var graphic = Paths.image("pixelUI/" + br);
	strum.loadGraphic(graphic, true, Math.floor(graphic.width / 4), Math.floor(graphic.height / 5));
	strum.animation.add('static', [strum.noteData]);
	strum.animation.add('pressed', [strum.noteData + 4, strum.noteData + 8], 12, false);
	strum.animation.add('confirm', [strum.noteData + 12, strum.noteData + 16], 16, false);
	strum.playAnim("static", true);
	strum.antialiasing = false;

	strum.scale.set(6 * Note.spriteScale / 0.7, 6 * Note.spriteScale / 0.7);    
	strum.updateHitbox();

	strum.defScale.x = strum.scale.x;
	strum.defScale.y = strum.scale.y;
	
	if(lastAnim != null)
	{
		strum.playAnim(lastAnim, true);
	}
}

function preSetupNoteSplash(){

}

function optionsChanged(changed:Array)
{
	if (rosesHealthBar && changed.contains("downScroll")){
		adjustHealthBar();
		bg.setPosition(hb.x - 5, hb.y - 5); // game is probably paused so it wont update
	}
	
	adjustClock();
}

///// custom functions /////

function adjustHealthBar()
{
	bg.offset.set(
		-0.5 * (bg.width - bg.frameWidth) - 5, 
		-0.5 * (bg.height - bg.frameHeight) - 5
	);
	
	var offY = bg.height / 2 - 5;
	
	bg.offset.y += offY;
	bg.offset.x += (bg.width - hb.width) / 2;
	
	hb.y = (ClientPrefs.downScroll ? 0 : FlxG.height - bg.height) + offY;
	
	hud.iconP1.y = hb.y + (hb.height - hud.iconP1.height) / 2;
	hud.iconP2.y = hb.y + (hb.height - hud.iconP2.height) / 2;
}

function adjustClock()
{
	timerCirc.visible = (ClientPrefs.timeBarType != "Disabled");
	setTimerTxt("");
	
	timerCirc.y = Note.swagWidth / 2 + 45;
	if (ClientPrefs.downScroll) timerCirc.y = FlxG.height - timerCirc.y;
	
	for (spr in timerNums){
		spr.y = timerCirc.y	- timerCirc.height / 2 + 11*6;
	}
	
	if (ClientPrefs.timeBarType == "Song Name"){
		timerSpecial.loadGraphic(Paths.image("pixelUI/clock-texts/"+game.songName));
		timerSpecial.updateHitbox();
		timerSpecial.exists = true;
		timerSpecial.setPosition(
			(FlxG.width - timerSpecial.width) / 2,
			timerCirc.y - timerSpecial.height / 2
		);
	}else{
		timerSpecial.exists = false;
	}
		
	if (hud.botplayTxt != null)
		hud.botplayTxt.y = timerCirc.y - hud.botplayTxt.height / 2;
}

function formatTime(time:Float)
{
	var displayMinutes = Std.string(Std.int(time / 60));
	var displaySeconds = Std.string(Std.int(time % 60));
	while (displaySeconds.length < 2)
		displaySeconds = "0" + displaySeconds;
	
	return displayMinutes + ":" + displaySeconds;
}

function updateTimerTxt()
{
	var curTime:Float = Math.max(0, Conductor.songPosition - ClientPrefs.noteOffset);
	
	timerSpecial.exists = false;
	
	var txt:String = "";
	switch (ClientPrefs.timeBarType)
	{
		case "Percentage":
			txt = Math.floor((curTime / game.songLength) * 100) + "%";
			
		case "Time Left":
			txt = (formatTime((game.songLength - curTime) / 1000 / FlxG.timeScale));
			
		case "Time Elapsed":
			txt = (formatTime(curTime / 1000 / FlxG.timeScale));		
			
		case "Song Name":
			txt = "";
			timerSpecial.exists = true;
	}
	
	if (curClockTxt != txt)
		setTimerTxt(txt);
}

function setTimerTxt(text:String)
{
	curClockTxt = text;

	var splitText = text.split("");
	var totalWidth = 5*6*splitText.length - 6;
	var offset = 0;
	
	if (splitText.contains(":")){
		totalWidth-=3*6;
	}
	
	for (spr in timerNums){
		spr.exists = false;
	}
	
	for (i in 0...splitText.length){
		var char = splitText[i];
		
		var spr = timerNums[i];
		if (spr==null) spr = makeTimerSpr(char);
		
		spr.animation.play(char);
		spr.exists = true;
		
		spr.x = timerCirc.x + timerCirc.width / 2 - totalWidth / 2 + i * 5*6 + offset;
		
		if (char==":"){
			spr.x -= 6;
			offset -= 3*6;
		}
	}
}

function makeTimerSpr(?name)
{
	var spr = new FlxSprite().loadGraphic(timerNumsGraphic, true, 5, 6);
	spr.y = timerCirc.y	- timerCirc.height / 2 + 11*6;

	for (i in 0...10)
	spr.animation.add(""+i, [i], 0, false);
	spr.animation.add("%", [10], 0, false);
	spr.animation.add(":", [11], 0, false);
	spr.animation.play((name != null) ? name : "0");
	
	spr.antialiasing = false;
	spr.scale.set(6,6);
	spr.updateHitbox();
	
	timerNums.push(spr);
	hud.insert(hud.members.indexOf(timerCirc)+1, spr);
	
	return spr;
}
